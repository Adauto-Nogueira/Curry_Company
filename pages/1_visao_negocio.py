
# Libraries 
from haversine import haversine
import plotly.express as px
import plotly.graph_objects as go

# Biblioteca necess√°ria
import pandas as pd
import streamlit as st
from PIL import Image 
import folium
from streamlit_folium import folium_static
import datetime

st.set_page_config(page_title='Vis√£o Empresa', page_icon='üìà', layout='wide' )

# Importar dataset
df = pd.read_csv('train.csv')

#------------------------
#  Fun√ß√µes
#------------------------


def country_maps(df1):
        df_aux = (df1.loc[:, ['Delivery_location_latitude', 'Delivery_location_longitude', 'City', 'Road_traffic_density']]
                 .groupby(['City', 'Road_traffic_density'])
                 .median()
                 .reset_index())
    
        df_aux = df_aux.head(30)
    
        map = folium.Map()
    
        for index, location_info in df_aux.iterrows():
            folium.Marker([location_info['Delivery_location_latitude'],
                   location_info['Delivery_location_longitude' ]], popup=location_info[['City', 'Road_traffic_density']] ).add_to(map)
    
        folium_static(map, width=1024, height=600 )
        
        


def order_share_by_week(df1):
            df_aux1 = df1.loc[:, ['ID', 'week_of_year']].groupby('week_of_year').count().reset_index()
            df_aux2 = df1.loc[:, ['Delivery_person_ID', 'week_of_year']].groupby('week_of_year').nunique().reset_index()
            df_aux = pd.merge(df_aux1, df_aux2, how='inner')
            
            df_aux['Order_by_Delivery'] = df_aux['ID'] / df_aux['Delivery_person_ID']
    
            fig = px.line(df_aux, x='week_of_year', y='Order_by_Delivery')
            
            return fig


def order_week(df1):
    df1['week_of_year'] = df1['Order_Date'].dt.strftime('%U')
        
    pedido_sem = df1.loc[:, ['ID', 'week_of_year']].groupby('week_of_year').count().reset_index()
        
    fig = px.line(pedido_sem, x='week_of_year', y='ID')
    
    return fig
        

def order_metric(df1):
    pedidos_dia = df1.loc[:, ['ID', 'Order_Date']].groupby('Order_Date').count().reset_index()
        
    fig = px.bar(pedidos_dia, x='Order_Date', y='ID')
        
    return fig



def traffic_order_city(df1):
            H = df1.loc[:, ['ID', 'City', 'Road_traffic_density']].groupby(['City', 'Road_traffic_density']).count().reset_index()
            
            fig = px.scatter(H, x='City', y='Road_traffic_density', size='ID' )
            
            return fig


def order_traffic_share(df1):
    pedido_trafego = df1.loc[:, ['ID', 'Road_traffic_density']].groupby('Road_traffic_density').count().reset_index()
            
    pedido_trafego['ped_tra'] = 100 * (pedido_trafego['ID'] / pedido_trafego['ID'].sum())
            
    fig = px.pie(pedido_trafego, values='ped_tra', names='Road_traffic_density')
            
    return fig


def clean_code( df ):
    """ Est√° fun√ß√£o tem a responsabilidade de limpar o dataset
    1. Remo√ß√£o dos espa√ßos das strings
    2. Excluir linhas com valores 'NaN'
    3. Mudan√ßa do tipo de dado das colunas
    4. Formata√ß√£o da coluna de data
    5. Limpeza da coluna tempo (remo√ß√£o do texto, da vari√°vel num√©rica)
    
    Input: Dataframe (df1)
    Output: Dataframe (df1)
    """
    

    # Remover espa√ßos das strings
    df.loc[: ,'ID'] = df.loc[:, 'ID'].str.strip()
    df.loc[: ,'Delivery_person_ID'] = df.loc[: ,'Delivery_person_ID'].str.strip()
    df.loc[: ,'Time_Orderd'] = df.loc[: ,'Time_Orderd'].str.strip()
    df.loc[: ,'Type_of_vehicle'] = df.loc[: ,'Type_of_vehicle'].str.strip()
    df.loc[: ,'City'] = df.loc[: ,'City'].str.strip()
    df.loc[: ,'Road_traffic_density'] = df.loc[: ,'Road_traffic_density'].str.strip()
    
    # Excluir as linhas com idades dos entregadores vazia
    # (conceito de sele√ß√£o condicional)
    linhas_vazias = (df['Delivery_person_ID'] != 'NaN') & (df['City'] != 'NaN') & (df['Road_traffic_density'] != 'NaN ') & (df['Delivery_person_Age'] != 'NaN ') & (df['multiple_deliveries'] != 'NaN ') & (df['Festival'] != 'NaN ')
    
    df = df.loc[linhas_vazias, :]

    # Convers√£o de texto/categorias/strigs para inteiros
    df['Delivery_person_Age'] = df['Delivery_person_Age'].astype(int)
    
    # Convers√£o de texto/categoria/strings para numeros decimais
    df['Delivery_person_Ratings'] = df['Delivery_person_Ratings'].astype(float)
    
    # Convers√£o de texto para data
    df['Order_Date'] = pd.to_datetime(df['Order_Date'], format='%d-%m-%Y')
    
    # Convers√£o de texto para int
    df['multiple_deliveries'] = df['multiple_deliveries'].astype(int)
    
    # Tirando texto de n√∫meros
    
    df['Time_taken(min)'] = df['Time_taken(min)'].apply(lambda x: x.split('(min) ')[1])
    df['Time_taken(min)'] = df['Time_taken(min)'].astype(int)
    
    return df

#============================= In√≠cio da estrutura L√≥gica do c√≥digo ==================

# Limpeza de dados

df1 = clean_code( df )


# Vis√£o empresa

# =======================================
# Barra Lateral
# =======================================

st.header('Marketplace - Vis√£o Cliente')

#image_path = 'C:\\Users\\adaut_gg\\repos_cds\\FTC\\Ciclo_6_Conceito_de_ETL\\logo.jpg'
image = Image.open('logo.jpg')
st.sidebar.image(image, width=300)

st.sidebar.markdown('# Cury Company')
st.sidebar.markdown('## Fast Delivery in Town')
st.sidebar.markdown("""---""")

st.sidebar.markdown('## Selecione uma data limite')

date_slider = st.sidebar.slider(
    'At√© qual o valor?',
    value=pd.datetime(2022, 4, 13),
    min_value=pd.datetime(2022, 3, 1),
    max_value=pd.datetime(2022, 3, 19),
    format='DD-MM-YYYY')

st.sidebar.markdown("""---""")

traffic_options = st.sidebar.multiselect(
    'Quais as condi√ß√µes de tr√¢nsito?',
    ['High', 'Jam', 'Low', 'Medium'],
    default='Low' )

st.sidebar.markdown("""---""")
st.sidebar.markdown('### Powered by Comunidade DS')

linhas_selecionadas = df1['Order_Date'] < date_slider
df1 = df1.loc[linhas_selecionadas, :]


linhas_selecionadas = df1['Road_traffic_density'].isin(traffic_options)
df1 = df1.loc[linhas_selecionadas, :]

# =======================================
# Layout Streamlit
# =======================================

tab1,tab2,tab3 = st.tabs(['Vis√£o gerencial','Vis√£o t√°tica','Vis√£o geogr√°fica'])

with tab1:
    with st.container():
        st.markdown('# Orders by day')
        fig = order_metric(df1)
        st.plotly_chart(fig, use_container_width=True)
        
        
        
    with st.container():
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown('## Pedidos por tr√°fego')
            fig = order_traffic_share(df1)
            st.plotly_chart(fig, use_container_width=True) 
            
            
        with col2:
            
            st.markdown('## Volume de pedidos por cidade e tr√°fego')
            fig = traffic_order_city(df1)
            st.plotly_chart(fig, use_container_width=True)                       
            
            
            
            
with tab2:
    with st.container():
        st.markdown('## Quantidade de pedidos por semana')
        fig = order_week(df1)
        st.plotly_chart(fig, use_container_width=True)
        
        
        
    with st.container():
        st.markdown('## Pedidos por entregador e por semana')
        fig = order_share_by_week(df1)
        st.plotly_chart(fig, use_container_width=True)
        
        
        
            
                    
            
with tab3:
    st.header('Mapa do pa√≠s')
    country_maps(df1)
    
       
    
print('Estou aqui')